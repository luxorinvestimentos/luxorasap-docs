{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde0 LuxorASAP","text":"<p>Luxor Automatic System for Assets and Portfolios \u00e9 o toolbox oficial da Luxor para manipula\u00e7\u00e3o de dados de investimento, integra\u00e7\u00e3o com provedores externos (BTG Pactual), e gerenciamento de pipelines de dados para an\u00e1lise, marca\u00e7\u00e3o e reporting.</p> <p>Projetado para automatizar tarefas recorrentes do time de gest\u00e3o e analytics, o LuxorASAP prov\u00ea uma interface limpa, extens\u00edvel e segura para acessar:</p> <ul> <li>\u2705 Tabelas financeiras em Parquet</li> <li>\u2705 API de relat\u00f3rios do BTG Pactual</li> <li>\u2705 Registro e leitura de boletas offshore</li> <li>\u2705 Grava\u00e7\u00e3o incremental no ADLS (Azure Blob Storage)</li> <li>\u2705 Utilit\u00e1rios para DataFrames e schemas</li> </ul>"},{"location":"#estrutura-de-modulos","title":"\ud83d\udce6 Estrutura de M\u00f3dulos","text":"<ul> <li><code>btgapi</code>: Integra\u00e7\u00e3o autenticada com a API do BTG</li> <li><code>datareader</code>: Consulta a dados de mercado e fundos</li> <li><code>ingest</code>: Salvamento e atualiza\u00e7\u00e3o de tabelas no ADLS</li> <li><code>utils</code>: Leitura de arquivos bin\u00e1rios e acesso ao blob</li> </ul>"},{"location":"#autenticacao-e-ambiente","title":"\ud83d\udd11 Autentica\u00e7\u00e3o e Ambiente","text":"<p>Algumas funcionalidades exigem credenciais armazenadas de forma segura. O acesso ao Blob Storage e \u00e0 API do BTG requer:</p>"},{"location":"#variaveis-de-ambiente-recomendado","title":"\u2705 Vari\u00e1veis de ambiente (recomendado)","text":"<p>Crie um arquivo <code>.env</code> na raiz do seu projeto com o seguinte conte\u00fado:</p> <pre><code># Azure Blob Storage\nAZURE_STORAGE_CONNECTION_STRING=\"DefaultEndpointsProtocol=...;AccountName=...\"\n\n# BTG API\nBTG_CLIENT_ID=\"seu_client_id\"\nBTG_CLIENT_SECRET=\"seu_client_secret\"\n</code></pre>"},{"location":"#alternativa","title":"\ud83e\uddea Alternativa","text":"<p>Voc\u00ea tamb\u00e9m pode passar os par\u00e2metros diretamente nas fun\u00e7\u00f5es:</p> <pre><code>get_access_token(client_id=\"...\", client_secret=\"...\", test_env=False)\n</code></pre>"},{"location":"#exemplo-de-uso","title":"\ud83d\udee0\ufe0f Exemplo de uso","text":"<pre><code>from luxorasap.datareader import LuxorQuery\nfrom luxorasap.ingest import save_table\nfrom luxorasap.btgapi import get_access_token, request_portfolio\n\nlq = LuxorQuery()\ndf = lq.get_table(\"trades\")\nsave_table(\"trades_backup\", df)\n\ntoken = get_access_token()\nticket = request_portfolio(token, \"FUNDO XPTO\", start_date, end_date)\n</code></pre>"},{"location":"#licenca","title":"\ud83d\udcc4 Licen\u00e7a","text":"<p>Este projeto \u00e9 de uso interno da Luxor Investimentos.</p>"},{"location":"btgapi/","title":"M\u00f3dulo <code>btgapi</code>","text":"<p>Este m\u00f3dulo oferece um wrapper autenticado para integra\u00e7\u00e3o com as APIs do BTG Pactual, incluindo relat\u00f3rios, boletas offshore e autentica\u00e7\u00e3o JWT.</p>"},{"location":"btgapi/#autenticacao","title":"\ud83d\udccc Autentica\u00e7\u00e3o","text":""},{"location":"btgapi/#get_access_token","title":"<code>get_access_token</code>","text":"<p>Obt\u00e9m um token JWT v\u00e1lido (~1h) para autentica\u00e7\u00e3o nas APIs do BTG.</p> <pre><code>from luxorasap.btgapi import get_access_token\n\ntoken = get_access_token(test_env=True)\n</code></pre> <p>Par\u00e2metros:</p> <ul> <li><code>client_id</code> (<code>str</code>, opcional): ID do cliente. Se <code>None</code>, ser\u00e1 lido de vari\u00e1vel de ambiente.</li> <li><code>client_secret</code> (<code>str</code>, opcional): Segredo do cliente. Se <code>None</code>, ser\u00e1 lido de vari\u00e1vel de ambiente.</li> <li><code>test_env</code> (<code>bool</code>): Define se usa ambiente de testes. Default: <code>True</code>.</li> <li><code>timeout</code> (<code>int</code>): Timeout em segundos. Default: <code>20</code>.</li> </ul> <p>Retorna: <code>str</code> \u2014 Token de autentica\u00e7\u00e3o. Erros: <code>BTGApiError</code></p>"},{"location":"btgapi/#relatorios","title":"\ud83d\udcd1 Relat\u00f3rios","text":""},{"location":"btgapi/#request_portfolio","title":"<code>request_portfolio</code>","text":"<p>Solicita relat\u00f3rio de carteira para um fundo.</p> <pre><code>ticket = request_portfolio(token, \"FUND NAME\", start_date, end_date)\n</code></pre> <p>Par\u00e2metros: - <code>token</code> (<code>str</code>): Token JWT. - <code>fund_name</code> (<code>str</code>) - <code>start_date</code>, <code>end_date</code> (<code>datetime.date</code>) - <code>format</code> (<code>str</code>): <code>\"excel\"</code>, <code>\"xml5\"</code> ou <code>\"pdf\"</code></p> <p>Retorna: <code>str</code> \u2014 Ticket da requisi\u00e7\u00e3o.</p>"},{"location":"btgapi/#check_report_ticket","title":"<code>check_report_ticket</code>","text":"<p>Verifica se um ticket foi processado.</p> <p>Retorna: <code>bytes</code> se o conte\u00fado estiver pronto. Erros: <code>BTGApiError</code> em caso de pend\u00eancia ou erro.</p>"},{"location":"btgapi/#await_report_ticket_result","title":"<code>await_report_ticket_result</code>","text":"<p>Aguarda at\u00e9 que o ticket esteja pronto e retorna conte\u00fado bin\u00e1rio (<code>bytes</code>).</p> <pre><code>zip_bytes = await_report_ticket_result(token, ticket)\n</code></pre>"},{"location":"btgapi/#process_zip_to_dfs","title":"<code>process_zip_to_dfs</code>","text":"<p>Extrai todos os arquivos <code>.zip</code> e retorna <code>dict[str, pd.DataFrame]</code>.</p> <pre><code>dfs = process_zip_to_dfs(zip_bytes)\n</code></pre>"},{"location":"btgapi/#request_investors_transactions_report","title":"<code>request_investors_transactions_report</code>","text":"<p>Solicita relat\u00f3rio de movimenta\u00e7\u00f5es por cotistas (RTA).</p>"},{"location":"btgapi/#request_fundflow_report","title":"<code>request_fundflow_report</code>","text":"<p>Gera relat\u00f3rio FundFlow (RTA) com base em datas e fundo.</p> <pre><code>ticket = request_fundflow_report(token, start_date, end_date, fund_name=\"FUND\")\n</code></pre>"},{"location":"btgapi/#trades-offshore","title":"\ud83d\udce5 Trades Offshore","text":""},{"location":"btgapi/#submit_offshore_equity_trades","title":"<code>submit_offshore_equity_trades</code>","text":"<p>Submete lista de trades offshore (equities).</p> <pre><code>ticket = submit_offshore_equity_trades(token, trades=[{...}], test_env=True)\n</code></pre>"},{"location":"btgapi/#await_transaction_ticket_result","title":"<code>await_transaction_ticket_result</code>","text":"<p>Consulta e espera o resultado de uma boleta enviada.</p> <pre><code>df = await_transaction_ticket_result(token, ticket)\n</code></pre> <p>Retorna: <code>pd.DataFrame</code> com status, ticket, refer\u00eancia, mensagens etc.</p>"},{"location":"btgapi/#excecoes","title":"\u26a0\ufe0f Exce\u00e7\u00f5es","text":""},{"location":"btgapi/#btgapierror","title":"<code>BTGApiError</code>","text":"<p>Exce\u00e7\u00e3o customizada lan\u00e7ada em qualquer erro de autentica\u00e7\u00e3o, requisi\u00e7\u00e3o ou processamento.</p>"},{"location":"datareader/","title":"M\u00f3dulo <code>datareader</code>","text":"<p>Este m\u00f3dulo prov\u00ea a interface <code>LuxorQuery</code> para leitura de tabelas, s\u00e9ries temporais e an\u00e1lises financeiras dentro do data lake da Luxor (ADLS).</p>"},{"location":"datareader/#classe-luxorquery","title":"\ud83d\udd0d Classe <code>LuxorQuery</code>","text":""},{"location":"datareader/#instanciacao","title":"Instancia\u00e7\u00e3o","text":"<pre><code>from luxorasap.datareader import LuxorQuery\n\nlq = LuxorQuery()\n</code></pre>"},{"location":"datareader/#tabelas","title":"\ud83d\udcc4 Tabelas","text":""},{"location":"datareader/#get_tablename-str-pddataframe","title":"<code>get_table(name: str) -&gt; pd.DataFrame</code>","text":"<p>L\u00ea uma tabela Parquet da camada enriquecida do ADLS.</p> <pre><code>df = lq.get_table(\"trades\")\n</code></pre>"},{"location":"datareader/#table_existsname-str-bool","title":"<code>table_exists(name: str) -&gt; bool</code>","text":"<p>Verifica se a tabela est\u00e1 registrada no cat\u00e1logo.</p>"},{"location":"datareader/#precos","title":"\ud83d\udcc8 Pre\u00e7os","text":""},{"location":"datareader/#get_priceasset-str-px_date-str-datetime-float-none","title":"<code>get_price(asset: str, px_date: str | datetime) -&gt; float | None</code>","text":"<p>Obt\u00e9m o pre\u00e7o de fechamento pontual de um ativo em uma data.</p> <pre><code>price = lq.get_price(\"msft us equity\", px_date=\"2024-12-31\")\n</code></pre>"},{"location":"datareader/#get_pricesasset-str-previous_date-recent_date-period-strnone-pdseries","title":"<code>get_prices(asset: str, previous_date, recent_date, period: str=None) -&gt; pd.Series</code>","text":"<p>Retorna s\u00e9rie de pre\u00e7os para o ativo. Period pode ser mtd, ytd, qtr, 1m, 2m, 3m, etc.</p> <pre><code>series = lq.get_prices(\"msft us equity\", recent_date=datetime.date(2024,12,31), period='ytd')\n</code></pre>"},{"location":"datareader/#analises","title":"\ud83d\udcca An\u00e1lises","text":""},{"location":"datareader/#get_pct_changeasset-str-previous_date-recent_date-float","title":"<code>get_pct_change(asset: str, previous_date, recent_date) -&gt; float</code>","text":"<p>Retorna a varia\u00e7\u00e3o percentual no per\u00edodo.</p>"},{"location":"datareader/#get_pct_changesasset-str-previous_date-recent_date-period-str-pdseries","title":"<code>get_pct_changes(asset: str, previous_date, recent_date, period: str) -&gt; pd.Series</code>","text":"<p>Retorna a s\u00e9rie de retornos di\u00e1rios. Period pode ser mtd, ytd, qtr, 1m, 2m, 3m, etc.</p>"},{"location":"datareader/#calculate_volatilityasset-str-previous_date-recent_date-float","title":"<code>calculate_volatility(asset: str, previous_date, recent_date) -&gt; float</code>","text":"<p>Volatilidade anualizada de retornos di\u00e1rios (std * sqrt(252)).</p>"},{"location":"datareader/#calculate_price_correlationasset1-asset2-previous_date-recent_date-float","title":"<code>calculate_price_correlation(asset1, asset2, previous_date, recent_date) -&gt; float</code>","text":"<p>Correla\u00e7\u00e3o entre os retornos de dois ativos no per\u00edodo.</p>"},{"location":"datareader/#fundos-e-carteiras","title":"\ud83d\udcbc Fundos e Carteiras","text":""},{"location":"datareader/#get_positions_and_movementsfund-str-date-pddataframe","title":"<code>get_positions_and_movements(fund: str, date) -&gt; pd.DataFrame</code>","text":"<p>Devolve posi\u00e7\u00e3o do fundo com compras/vendas no dia.</p>"},{"location":"datareader/#get_fund_aumfund-str-date-datetimedate-float","title":"<code>get_fund_aum(fund: str, date:  datetime.date) -&gt; float</code>","text":"<p>Retorna o AUM (Assets Under Management) de um fundo numa data.</p>"},{"location":"datareader/#get_fund_pnlfund-str-previous_date-datetimedate-recent_date-datetimedate-pdseries","title":"<code>get_fund_pnl(fund: str, previous_date: datetime.date, recent_date: datetime.date) -&gt; pd.Series</code>","text":"<p>S\u00e9rie com o lucro/preju\u00edzo do fundo no per\u00edodo.</p>"},{"location":"datareader/#run_return_analysisasset_or_df-dict","title":"<code>run_return_analysis(asset_or_df, ...) -&gt; dict</code>","text":"<p>An\u00e1lise de performance: CAGR, drawdown, sharpe, etc.</p>"},{"location":"datareader/#outros","title":"\ud83e\udde0 Outros","text":"<ul> <li>Datas devem ser <code>datetime.date</code></li> <li>Pre\u00e7os e retornos sempre assumem coluna <code>\"Price\"</code> por padr\u00e3o</li> </ul>"},{"location":"ingest/","title":"M\u00f3dulo <code>ingest</code>","text":"<p>O m\u00f3dulo <code>ingest</code> \u00e9 respons\u00e1vel por gravar e atualizar tabelas no ADLS. Ele oferece uma API moderna (<code>cloud</code>) e uma interface legada (<code>legacy_local.DataLoader</code>), mantida apenas para compatibilidade.</p>"},{"location":"ingest/#interface-moderna-cloud","title":"\u2601\ufe0f Interface Moderna: <code>cloud</code>","text":""},{"location":"ingest/#save_table","title":"<code>save_table</code>","text":"<p>Salva um <code>DataFrame</code> como Parquet no Azure Blob Storage.</p> <pre><code>from luxorasap.ingest import save_table\n\nsave_table(\"trades\", df)\n</code></pre> <p>Par\u00e2metros:</p> <ul> <li><code>table_name</code> (<code>str</code>): Nome da tabela (sem extens\u00e3o).</li> <li><code>df</code> (<code>pd.DataFrame</code>): Dados a serem salvos.</li> <li><code>index</code> (<code>bool</code>): Se <code>True</code>, inclui o \u00edndice. Default: <code>False</code>.</li> <li><code>index_name</code> (<code>str</code>): Nome da coluna de \u00edndice (se aplic\u00e1vel). Default: <code>\"index\"</code>.</li> <li><code>normalize_columns</code> (<code>bool</code>): Se <code>True</code>, normaliza o nome das colunas.</li> <li><code>directory</code> (<code>str</code>): Caminho no ADLS. Default: <code>\"enriched/parquet\"</code>.</li> </ul>"},{"location":"ingest/#incremental_load","title":"<code>incremental_load</code>","text":"<p>Atualiza a tabela existente no ADLS com novos dados, preservando hist\u00f3ricos e removendo duplica\u00e7\u00f5es com base em uma coluna incremental.</p> <pre><code>from luxorasap.datareader import LuxorQuery\nfrom luxorasap.ingest import incremental_load\n\nincremental_load(lq, \"prices_daily\", df_new, increment_column=\"Date\")\n</code></pre> <p>Par\u00e2metros adicionais:</p> <ul> <li><code>lq</code> (<code>LuxorQuery</code>): Para acessar a vers\u00e3o atual da tabela.</li> <li><code>increment_column</code> (<code>str</code>): Nome da coluna que define o corte temporal.</li> </ul>"},{"location":"ingest/#interface-legada-legacy_localdataloader","title":"\ud83d\uddc2\ufe0f Interface Legada: <code>legacy_local.DataLoader</code>","text":"<p>\u26a0\ufe0f Depreca\u00e7\u00e3o em andamento: prefira a API <code>cloud</code>.</p> <pre><code>from luxorasap.ingest import DataLoader\n\ndl = DataLoader(luxorDB_directory=Path(\"/tmp/tabelas\"))\n</code></pre>"},{"location":"ingest/#recursos-principais","title":"Recursos principais:","text":"<ul> <li><code>add_file_tracker(...)</code>: Adiciona arquivo Excel para monitoramento e carga.</li> <li><code>load_file_if_modified(...)</code>: Recarrega arquivo se houver nova vers\u00e3o.</li> <li><code>load_table_if_modified(...)</code>: Substitui tabela se o timestamp for mais recente.</li> <li><code>scan_files()</code>: Varre e processa todos os arquivos monitorados.</li> <li>Suporte a exporta\u00e7\u00e3o para Parquet + ADLS</li> </ul>"},{"location":"ingest/#observacoes-tecnicas","title":"\ud83e\udde0 Observa\u00e7\u00f5es T\u00e9cnicas","text":"<ul> <li>O cliente padr\u00e3o de escrita \u00e9 <code>BlobParquetClient</code> via <code>utils.storage</code></li> <li>Os dados s\u00e3o convertidos para <code>str</code> antes do salvamento</li> <li>Suporte parcial a leitura via <code>bytes</code> (para APIs ou uploads)</li> </ul>"},{"location":"utils/","title":"M\u00f3dulo <code>utils</code>","text":"<p>O m\u00f3dulo <code>utils</code> re\u00fane fun\u00e7\u00f5es auxiliares reutiliz\u00e1veis, organizadas em dois subm\u00f3dulos principais: <code>dataframe</code> e <code>storage</code>.</p>"},{"location":"utils/#utilsdataframe","title":"\ud83d\udce6 <code>utils.dataframe</code>","text":"<p>Utilit\u00e1rios para padroniza\u00e7\u00e3o e leitura de dados.</p>"},{"location":"utils/#prep_for_save","title":"<code>prep_for_save</code>","text":"<p>Prepara um DataFrame para salvamento consistente.</p> <pre><code>from luxorasap.utils.dataframe import prep_for_save\n\ndf = prep_for_save(df, index=False, normalize=True)\n</code></pre> <p>Par\u00e2metros: - <code>df</code> (<code>pd.DataFrame</code>) - <code>index</code> (<code>bool</code>): Se <code>True</code>, inclui o \u00edndice como coluna. - <code>index_name</code> (<code>str</code>) - <code>normalize</code> (<code>bool</code>): Se <code>True</code>, normaliza tudo que for texto para lowercase.</p>"},{"location":"utils/#persist_column_formatting","title":"<code>persist_column_formatting</code>","text":"<p>Preserva formata\u00e7\u00f5es e tipos de colunas de DataFrames Excel.</p>"},{"location":"utils/#read_bytes","title":"<code>read_bytes</code>","text":"<p>Detecta e l\u00ea conte\u00fado bin\u00e1rio como Excel, CSV ou Parquet.</p> <pre><code>from luxorasap.utils.dataframe import read_bytes\n\ndf = read_bytes(content_bytes, filename=\"arquivo.xlsx\")\n</code></pre>"},{"location":"utils/#utilsstorage","title":"\u2601\ufe0f <code>utils.storage</code>","text":"<p>Interface para leitura/escrita no Azure Blob Storage com Parquet.</p>"},{"location":"utils/#classe-blobparquetclient","title":"Classe <code>BlobParquetClient</code>","text":"<p>Cliente que centraliza opera\u00e7\u00f5es com dados no formato Parquet no ADLS.</p>"},{"location":"utils/#metodos-principais","title":"M\u00e9todos principais:","text":"<ul> <li><code>write_df(df, blob_path)</code></li> <li>Grava o DataFrame no caminho do blob especificado.</li> <li><code>read_df(blob_path) -&gt; pd.DataFrame</code></li> <li>L\u00ea o conte\u00fado Parquet do blob e retorna como DataFrame.</li> <li><code>exists(blob_path) -&gt; bool</code></li> <li>Verifica se o arquivo existe no blob.</li> <li><code>list_paths(prefix=None) -&gt; list[str]</code></li> <li>Lista todos os arquivos em um diret\u00f3rio l\u00f3gico no ADLS.</li> </ul>"},{"location":"utils/#notas","title":"\ud83e\udde0 Notas","text":"<ul> <li>O <code>read_df</code> internamente usa <code>read_bytes</code> para detectar o formato.</li> <li>Toda escrita em Parquet assume <code>df.astype(str)</code> como padr\u00e3o.</li> </ul>"}]}